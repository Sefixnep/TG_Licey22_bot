import telebot
from loguru import logger
from Auxiliary import config

bot = telebot.TeleBot(config.BOT_TOKEN, parse_mode='html')


class Message:
    def __init__(self, text: str, buttons=None, *from_buttons, func=lambda *args: None):
        self.__text = text  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        self.__buttons = buttons  # –î–≤—É–º–µ—Ä–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–∏–¥–µ InlineKeyboardButton
        self.__board_tg = None  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º: InlineKeyboardMarkup
        if buttons:
            self.__board_tg = telebot.types.InlineKeyboardMarkup()
            for row in (map(lambda x: x.button_tg, buttons1D) for buttons1D in buttons):
                self.__board_tg.row(*row)
        for from_button in from_buttons:  # –ö–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            from_button.to_messages += (self,)
        self.__func = func  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    def __call__(self, *args):
        return self.__func(*args)

    def __getitem__(self, item):
        return self.__buttons[item[0]][item[1]]

    def new_line(self, message_tg, delete_message=True, userSendLogger=True):
        if userSendLogger:
            self.userSendLogger(message_tg)
        if delete_message:
            bot.delete_message(message_tg.chat.id, message_tg.id)
        return self.__botSendMessage(message_tg)

    def old_line(self, message_tg, text=None, userSendLogger=False):
        if userSendLogger:
            self.userSendLogger(message_tg, text)
        return self.__botEditMessage(message_tg)

    @staticmethod
    def __trueText(text, message_tg):
        return text.replace("<ID>", str(message_tg.chat.id)).replace("<USERNAME>", message_tg.chat.username)

    @staticmethod
    def userSendLogger(message_tg, text=None):
        if text is None:
            if '\n' in message_tg.text:
                logger.info(f'{message_tg.from_user.username} ({message_tg.chat.id}): \n{message_tg.text}')
            else:
                logger.info(f'{message_tg.from_user.username} ({message_tg.chat.id}): {message_tg.text}')
        else:
            if '\n' in text:
                logger.info(f'{message_tg.chat.username} ({message_tg.chat.id}): \n{text}')
            else:
                logger.info(f'{message_tg.chat.username} ({message_tg.chat.id}): {text}')

    def __botSendMessage(self, message_tg, parse_mode='MARKDOWN', indent=3):
        text = self.__trueText(self.__text, message_tg)
        botMessage = bot.send_message(chat_id=message_tg.chat.id, text=text, reply_markup=self.__board_tg,
                                      parse_mode=parse_mode)
        if self.__board_tg is None:
            if '\n' in text:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n")
            else:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}): {text}")
        else:
            reply_markup_text = ''
            for reply_markup1 in botMessage.json['reply_markup']['inline_keyboard']:

                for reply_markup2 in reply_markup1:
                    reply_markup_text += f'[{reply_markup2["text"]}]' + (' ' * indent)
                reply_markup_text = reply_markup_text[:-indent]

                reply_markup_text += '\n'
            reply_markup_text = reply_markup_text[:-1]
            logger.info(
                f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n{reply_markup_text}\n")
        return botMessage

    def __botEditMessage(self, message_tg, parse_mode='MARKDOWN', indent=3):
        text = self.__trueText(self.__text, message_tg)
        botMessage = bot.edit_message_text(chat_id=message_tg.chat.id, message_id=message_tg.id, text=text,
                                           reply_markup=self.__board_tg,
                                           parse_mode=parse_mode)
        if self.__board_tg is None:
            if '\n' in text:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n")
            else:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}): {text}")
        else:
            reply_markup_text = ''
            for reply_markup1 in botMessage.json['reply_markup']['inline_keyboard']:

                for reply_markup2 in reply_markup1:
                    reply_markup_text += f'[{reply_markup2["text"]}]' + (' ' * indent)
                reply_markup_text = reply_markup_text[:-indent]

                reply_markup_text += '\n'
            reply_markup_text = reply_markup_text[:-1]
            logger.info(
                f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n{reply_markup_text}\n")
        return botMessage


class Button:
    instances = list()  # –°–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∞

    def __init__(self, text: str, callback_data: str, *to_messages: Message,
                 func=lambda to_messages, message_tg: None):
        self.text = text  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        self.callback_data = callback_data  # –°–∫—Ä—ã—Ç—ã–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) –¥–∞–Ω–Ω—ã–µ, –Ω–µ—Å—É—â–∏–µ—Å—è –∫–Ω–æ–ø–∫–æ–π
        self.button_tg = telebot.types.InlineKeyboardButton(
            self.text, callback_data=self.callback_data)  # –∫–Ω–æ–ø–∫–∞ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ InlineKeyboardButton
        self.to_messages = to_messages  # –°–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤–µ–¥—ë—Ç –∫–Ω–æ–ø–∫–∞
        self.__func = func  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ to_messages –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è / –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ
        self.instances.append(self)

    def __call__(self, message_tg,
                 userSendLogger=True) -> Message:  # –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–Ω–æ–≤–∫–∏ –æ—Ç–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –∏–¥—Ç–∏
        if userSendLogger:
            Message.userSendLogger(message_tg, f'[{self.text}]')
        if self.__func(self.to_messages, message_tg) is not None:
            return self.__func(self.to_messages, message_tg)
        if self.to_messages:
            return self.to_messages[0]

    def __getattr__(self, callback_data):  # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ –µ—ë —Å–∫—Ä—ã—Ç—ã–º –¥–∞–Ω–Ω—ã–º, —Ç.–∫ –æ–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        for instance in self.instances:
            if instance.callback_data == callback_data:
                return instance


def delete_message(_, message_tg):
    bot.delete_message(message_tg.chat.id, message_tg.id)


def clear_next_step_handler(_, message_tg):
    bot.clear_step_handler_by_chat_id(
        message_tg.chat.id)  # –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º step_handler
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


# Buttons
button = Button('', '')

Button("–ù–æ–≤–æ—Å—Ç–∏", "news")
Button("–ö–æ–Ω–∫—É—Ä—Å—ã", "contests")

Button("–ü—Ä–æ—à–µ–¥—à–∏–µ", "past_contests")
Button("–ò–¥—É—â–∏–µ", "present_contests")
Button("–ì—Ä—è–¥—É—â–∏–µ", "future_contests")

Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_start")
Button("‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å ‚úñÔ∏è", "close", func=delete_message)

# Messages
message_contacts = Message("*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
                           "–°–æ–∑–¥–∞—Ç–µ–ª—å -> @Sefixnep", ((button.close,),))

message_start = Message("*ID:* `<ID>`\n"
                        "_–ü—Ä–∏–≤–µ—Ç, <USERNAME>!_", ((button.news, button.contests),),
                        button.back_to_start)

message_tense_contests = Message("–í—ã–±–µ—Ä–∏ —Å –∫–∞–∫–∏–º–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏ –∂–µ–ª–∞–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è:",
                                 ((button.past_contests, button.present_contests, button.future_contests),
                                  (button.back_to_start,)),
                                 button.contests)

message_news = Message("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", ((button.back_to_start,),), button.news)
